#!/usr/bin/env python3
"""
Demo script showing off the new write file capabilities of fs-agent.
This creates some sample files to demonstrate the functionality.
"""

import os
import sys
import tempfile
import shutil
import json
from pathlib import Path

# Add the project root to the path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from fs_agent.tools import write_file_contents, read_file_contents, list_directory_contents


def demo_step(step_num, description, func):
    """Run a demo step with nice formatting."""
    print(f"\nüìù Step {step_num}: {description}")
    print("-" * 50)
    try:
        func()
        print("‚úÖ Success!")
    except Exception as e:
        print(f"‚ùå Error: {e}")


def create_sample_project():
    """Create a sample Python project structure."""
    
    # Main Python file
    main_py_content = '''#!/usr/bin/env python3
"""
Sample Python application demonstrating fs-agent write capabilities.
"""

def greet(name):
    """Greet someone by name."""
    return f"Hello, {name}! Welcome to fs-agent."


def calculate_fibonacci(n):
    """Calculate the nth Fibonacci number."""
    if n <= 1:
        return n
    return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)


def main():
    """Main application entry point."""
    print("Welcome to the Sample App!")
    print(greet("Developer"))
    
    # Calculate some Fibonacci numbers
    for i in range(10):
        fib = calculate_fibonacci(i)
        print(f"Fibonacci({i}) = {fib}")


if __name__ == "__main__":
    main()
'''
    
    result = write_file_contents("sample_app.py", main_py_content)
    response = json.loads(result)
    print(f"Created sample_app.py ({response['size_bytes']} bytes)")


def create_project_readme():
    """Create a README file for the project."""
    
    readme_content = '''# Sample Project

This is a demonstration project created by fs-agent to showcase its write file capabilities.

## Features

- ‚úÖ File creation and modification
- ‚úÖ Directory structure creation
- ‚úÖ Backup system for safe overwrites
- ‚úÖ Security controls and validation
- ‚úÖ Unicode content support

## Files

- `sample_app.py` - Main application code
- `config.json` - Configuration file
- `requirements.txt` - Python dependencies
- `tests/` - Test directory with sample tests

## Usage

```bash
python sample_app.py
```

## Testing

```bash
python -m pytest tests/
```

---

*Generated by fs-agent write capabilities* ü§ñ
'''
    
    result = write_file_contents("README.md", readme_content)
    response = json.loads(result)
    print(f"Created README.md ({response['size_bytes']} bytes)")


def create_config_file():
    """Create a JSON configuration file."""
    
    config_content = '''{
    "app_name": "Sample FS-Agent Project",
    "version": "1.0.0",
    "settings": {
        "debug": true,
        "log_level": "INFO",
        "max_fibonacci": 20
    },
    "features": [
        "file_creation",
        "backup_system", 
        "security_validation",
        "unicode_support"
    ],
    "author": {
        "name": "FS-Agent",
        "description": "AI-powered local filesystem assistant"
    }
}'''
    
    result = write_file_contents("config.json", config_content)
    response = json.loads(result)
    print(f"Created config.json ({response['size_bytes']} bytes)")


def create_requirements_file():
    """Create a requirements.txt file."""
    
    requirements_content = '''# Python dependencies for sample project
# Generated by fs-agent

# Core dependencies
ollama>=0.1.0

# Development dependencies
pytest>=7.0.0
pytest-cov>=4.0.0

# Optional utilities
black>=22.0.0
flake8>=5.0.0
mypy>=1.0.0
'''
    
    result = write_file_contents("requirements.txt", requirements_content)
    response = json.loads(result)
    print(f"Created requirements.txt ({response['size_bytes']} bytes)")


def create_test_file():
    """Create a test file in a subdirectory."""
    
    test_content = '''"""
Test file for the sample application.
Demonstrates fs-agent's ability to create nested directory structures.
"""

import pytest
import sys
import os

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sample_app import greet, calculate_fibonacci


class TestSampleApp:
    """Test cases for the sample application."""
    
    def test_greet_function(self):
        """Test the greet function."""
        result = greet("Alice")
        assert "Hello, Alice!" in result
        assert "fs-agent" in result
    
    def test_fibonacci_base_cases(self):
        """Test Fibonacci function base cases."""
        assert calculate_fibonacci(0) == 0
        assert calculate_fibonacci(1) == 1
    
    def test_fibonacci_sequence(self):
        """Test Fibonacci sequence calculation."""
        expected = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
        for i, expected_val in enumerate(expected):
            assert calculate_fibonacci(i) == expected_val


def test_project_structure():
    """Test that all project files exist."""
    expected_files = [
        "sample_app.py",
        "README.md", 
        "config.json",
        "requirements.txt"
    ]
    
    for filename in expected_files:
        assert os.path.exists(filename), f"Missing file: {filename}"


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
'''
    
    result = write_file_contents("tests/test_sample_app.py", test_content)
    response = json.loads(result)
    print(f"Created tests/test_sample_app.py ({response['size_bytes']} bytes)")


def demonstrate_overwrite_with_backup():
    """Demonstrate safe file overwriting with backup."""
    
    # First, create a simple config
    simple_config = '{"version": "0.1.0", "debug": false}'
    write_file_contents("demo_config.json", simple_config)
    print("Created initial demo_config.json")
    
    # Now overwrite it with a more complex version
    complex_config = '''{
    "version": "2.0.0",
    "debug": true,
    "new_features": [
        "write_capabilities",
        "backup_system",
        "enhanced_security"
    ],
    "updated_by": "fs-agent overwrite demo"
}'''
    
    result = write_file_contents("demo_config.json", complex_config, overwrite=True)
    response = json.loads(result)
    print(f"Updated demo_config.json with backup at: {response['backup_created']}")
    
    # Show the backup exists
    backup_path = response['backup_created']
    if os.path.exists(backup_path):
        with open(backup_path, 'r') as f:
            backup_content = f.read()
        print(f"Backup contains: {backup_content}")


def show_final_directory_structure():
    """Show the final directory structure created."""
    print("\nüìÅ Final Project Structure:")
    print("=" * 30)
    
    result = list_directory_contents(".")
    response = json.loads(result)
    
    for item in sorted(response["contents"]):
        if os.path.isdir(item):
            print(f"üìÅ {item}/")
            # List subdirectory contents
            sub_result = list_directory_contents(item)
            sub_response = json.loads(sub_result)
            for sub_item in sorted(sub_response["contents"]):
                print(f"   üìÑ {sub_item}")
        else:
            # Get file size
            size = os.path.getsize(item)
            print(f"üìÑ {item} ({size} bytes)")


def main():
    """Run the complete demo."""
    print("üöÄ FS-Agent Write Capabilities Demo")
    print("=" * 50)
    print("This demo creates a sample Python project to showcase")
    print("the new write file capabilities of fs-agent.")
    
    # Create temporary directory for demo
    demo_dir = tempfile.mkdtemp(prefix="fs_agent_demo_")
    original_cwd = os.getcwd()
    
    try:
        os.chdir(demo_dir)
        print(f"\nüìç Demo directory: {demo_dir}")
        
        # Run demo steps
        demo_step(1, "Create main Python application", create_sample_project)
        demo_step(2, "Create project README", create_project_readme)
        demo_step(3, "Create configuration file", create_config_file)
        demo_step(4, "Create requirements file", create_requirements_file)
        demo_step(5, "Create test file (with directory)", create_test_file)
        demo_step(6, "Demonstrate overwrite with backup", demonstrate_overwrite_with_backup)
        demo_step(7, "Show final directory structure", show_final_directory_structure)
        
        print(f"\nüéâ Demo completed successfully!")
        print(f"üìÅ All files created in: {demo_dir}")
        print(f"üí° You can explore the created files to see the write capabilities in action.")
        
        # Ask if user wants to keep the files
        keep = input("\nü§î Keep demo files? (y/N): ").lower().strip()
        if keep in ['y', 'yes']:
            print(f"üìÅ Demo files preserved at: {demo_dir}")
            return 0
        else:
            print("üßπ Cleaning up demo files...")
            return 0
            
    finally:
        os.chdir(original_cwd)
        if 'keep' not in locals() or keep not in ['y', 'yes']:
            shutil.rmtree(demo_dir)


if __name__ == "__main__":
    sys.exit(main())
